on:
  push:
    branches:
     - monorepo/develop
  workflow_dispatch:
    inputs:
      staging:
        description: 'Staging'
        required: true
        default: 'develop'
        type: choice
        options:
          - "develop"
          - "production"
      product:
        description: 'product to build'
        required: true
        default: 'all'
        type: choice
        options:
          - "all"
          - "admin"
          - "web"

env:
  GITHUB_ACTION_STAGING: ${{inputs.staging || 'develop' }}
  GITHUB_ACTION_PRODUCT: ${{inputs.product || 'all' }}

jobs:
   setup:
     runs-on: ubuntu-latest
     outputs:
       staging: ${{ steps.step1.outputs.staging }}
       product: ${{ steps.step1.outputs.product }}
     steps:
       - name: setup
         id: step1
         run: |
              echo "staging=${GITHUB_ACTION_STAGING}" >> $GITHUB_OUTPUT
              echo "product=${GITHUB_ACTION_PRODUCT}" >> $GITHUB_OUTPUT

   build_admin:
     needs: [setup]
     if: ${{ needs.setup.outputs.product == 'all' || needs.setup.outputs.product == 'admin' }}
     environment:
       name: ${{ needs.setup.outputs.staging }}
     env:
       HOST: ${{vars.HOST}}
       PORT: ${{vars.PORT}}
       APP_KEYS: ${{secrets.APP_KEYS}}
       API_TOKEN_SALT: ${{secrets.API_TOKEN_SALT}}
       ADMIN_JWT_SECRET: ${{secrets.ADMIN_JWT_SECRET}}
       JWT_SECRET: ${{secrets.JWT_SECRET}}
       DOCKER_REGISTRY_LOGIN: ${{secrets.DOCKER_REGISTRY_LOGIN}}
       DOCKER_REGISTRY_PASSWORD: ${{secrets.DOCKER_REGISTRY_PASSWORD}}
       GOOGLE_API_KEY: ${{secrets.GOOGLE_API_KEY}}

     runs-on: [self-hosted, build]
     steps:
       - name: Checkout
         uses: actions/checkout@v4
         with:
           submodules: true
       - name: Set google api key
         run: |
              mkdir -p ./packages/admin/.local
              echo "$GOOGLE_API_KEY" > ./packages/admin/.local/ee-key.json
              echo "$GOOGLE_API_KEY" > ./packages/admin/ee-key.json
              echo "HOST=${HOST}" >> ./packages/admin/.env
              echo "PORT=${PORT}" >> ./packages/admin/.env
              echo "APP_KEYS=${APP_KEYS}" >> ./packages/admin/.env
              echo "API_TOKEN_SALT=${API_TOKEN_SALT}" >> ./packages/admin/.env
              echo "ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}" >> ./packages/admin/.env
              echo "JWT_SECRET=${JWT_SECRET}" >> ./packages/admin/.env
       - name: Build
         run: docker compose -f ./packages/admin/docker-compose.yml build
       - name: Login to registry
         run: docker login -u $DOCKER_REGISTRY_LOGIN -p $DOCKER_REGISTRY_PASSWORD
       - name: Push to registry
         run: docker compose -f ./packages/admin/docker-compose.yml push

   build_web:
     needs: [setup]
     if: ${{ needs.setup.outputs.product == 'all' || needs.setup.outputs.product == 'web' }}
     environment:
       name: ${{ needs.setup.outputs.staging }}
     env:
       REACT_APP_BASE_PATH: ${{vars.REACT_APP_BASE_PATH}}
       REACT_APP_GOOGLE_KEY: ${{secrets.REACT_APP_GOOGLE_KEY}}
     runs-on: [self-hosted, build]
     steps:
       - name: Checkout
         uses: actions/checkout@v4
         with:
           submodules: true
       - name: Dependencies
         run: yarn
       - name: Build
         run: yarn build_web
       - name: Upload web build
         uses: actions/upload-artifact@v3
         with:
           name: web-build
           path: ./packages/web/build

   deploy_admin:
     needs: [setup, build_admin]
     if: ${{ needs.setup.outputs.product == 'all' || needs.setup.outputs.product == 'admin' }}
     runs-on: [self-hosted, "${{ needs.setup.outputs.staging }}"]
     environment: ${{ needs.setup.outputs.staging }}
     steps:
       - name: Checkout
         uses: actions/checkout@v4
         with:
           submodules: true
       - name: docker-compose pull
         run: docker compose -p rrrcn-backend-${GITHUB_ACTION_STAGING} -f ./packages/admin/docker-compose.yml pull

       - name: docker-compose
         run: docker compose -p rrrcn-backend-${GITHUB_ACTION_STAGING} -f ./packages/admin/docker-compose.yml up -d


   deploy_web:
     needs: [setup, build_web]
     if: ${{ needs.setup.outputs.product == 'all' || needs.setup.outputs.product == 'web' }}
     runs-on: [self-hosted, "${{ needs.setup.outputs.staging }}"]
     environment: ${{ needs.setup.outputs.staging }}
     steps:
       - name: Checkout
         uses: actions/checkout@v4
         with:
           submodules: true
       - name: Download a single artifact
         uses: actions/download-artifact@v3
         with:
           name: web-build
           path: ./packages/web/web-build
       - name: docker-compose
         run: docker compose -p rrrcn-nginx-${GITHUB_ACTION_STAGING} -f ./packages/web/docker-compose.yml up -d


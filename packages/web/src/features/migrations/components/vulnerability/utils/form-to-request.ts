import { MultipleAreaVulnerabilityRequest } from "@rrrcn/services/src/controllers/vulnerability/multiple-area-vulnerability";
import { VulnerabilityFormType } from "../../../context/vulnerability-areas";
import { IndexedArea } from "@rrrcn/services/src/controllers/migrations/types";
import { bboxPolygon } from "@turf/turf";

export const vulnerabilityFormToRequest = (
  form: Required<VulnerabilityFormType>,
  areas: IndexedArea[]
): MultipleAreaVulnerabilityRequest => {
  const {
    bladeFormRadiusArray,
    flight_type,
    bladeFormChordsArray,
    blades,
    chord,
    hubheight,
    length,
    nocturnalActivity,
    numberOfTurbines,
    offset,
    omega,
    pitch,
    radius,
    speed,
    yinc,
    xinc,
    updownProportion,

    timeOfWorkPerMonth,
    wingspan,
  } = form;
  console.log(areas, form);
  const areasConfig: MultipleAreaVulnerabilityRequest["areas"] = areas.flatMap(
    (it) => {
      const altitudesValues = Object.keys(it.altitudeStatistics)
        .map((it) => Number(it))
        .filter((it) => it !== undefined && String(it) !== "NaN")
        .sort((a, b) => Math.sign(a - b));
      console.log(it.altitudeStatistics, altitudesValues);
      const totalAltitudes = Object.values(it.altitudeStatistics).reduce(
        (acc, it) => acc + Number(it),
        0
      );
      if (!totalAltitudes) return [];
      const rotorInterval = [hubheight - radius, hubheight + radius];
      const percentAtRotorHeight =
        altitudesValues.filter(
          (it) => it <= rotorInterval[1] && it >= rotorInterval[0]
        ).length / totalAltitudes;
      return [
        {
          id: it.id,
          area: bboxPolygon(it.area),
          percentAtRotorHeight,
          flightheights: totalAltitudes
            ? new Array(Math.max(...altitudesValues))
                .fill(0)
                .map((__, index) => [
                  index,
                  (it.altitudeStatistics[index] || 0) / totalAltitudes,
                ])
            : [],
        },
      ];
    }
  );
  const bladeForm = bladeFormRadiusArray.map(
    (it, index) => [it, bladeFormChordsArray[index]] as [number, number]
  );
  return {
    areas: areasConfig,
    yinc,
    xinc,
    windfarmInstanceConfig: {
      timeOfWorkPerMonth,
      offset,
      hubheight,
    },
    windfarmConfig: {
      radius,
      blades,
      chord,
      omega,
      numberOfTurbines,
      pitch,
      bladeForm,
    },
    updownProportion,
    birdConfig: {
      wingspan,
      flight_type,
      length,
      speed,
      nocturnalActivity,
    },
  };
};

import { MultipleAreaVulnerabilityRequest } from "@rrrcn/services/src/controllers/vulnerability/multiple-area-vulnerability";
import { VulnerabilityFormType } from "../../../context/vulnerability-areas";
import { IndexedArea } from "@rrrcn/services/src/controllers/migrations/types";
import { bboxPolygon } from "@turf/turf";

export const vulnerabilityFormToRequest = (
  form: Required<VulnerabilityFormType>,
  areas: IndexedArea[]
): MultipleAreaVulnerabilityRequest => {
  const {
    bladeFormRadiusArray,
    flight_type,
    bladeFormChordsArray,
    blades,
    chord,
    hubheight,
    length,
    nocturnalActivity,
    numberOfTurbines,
    offset,
    omega,
    pitch,
    radius,
    speed,
    yinc,
    xinc,
    updownProportion,

    timeOfWorkPerMonth,
    wingspan,
  } = form;
  console.log(areas, form);
  const areasConfig: MultipleAreaVulnerabilityRequest["areas"] = areas.map(
    (it) => {
      const totalAltitudes = it.probabilities.altitudes.reduce(
        (acc, it) => acc + it.count,
        0
      );
      return {
        id: it.id,
        area: bboxPolygon(it.area),
        flightheights: totalAltitudes
          ? it.probabilities.altitudes.map(({ value, count }) => [
              value,
              count / totalAltitudes,
            ])
          : [],
      };
    }
  );
  const bladeForm = bladeFormRadiusArray.map(
    (it, index) => [it, bladeFormChordsArray[index]] as [number, number]
  );
  return {
    areas: areasConfig,
    yinc,
    xinc,
    windfarmInstanceConfig: {
      timeOfWorkPerMonth,
      offset,
      hubheight,
    },
    windfarmConfig: {
      radius,
      blades,
      chord,
      omega,
      numberOfTurbines,
      pitch,
      bladeForm,
    },
    updownProportion,
    birdConfig: {
      wingspan,
      flight_type,
      length,
      speed,
      nocturnalActivity,
    },
  };
};

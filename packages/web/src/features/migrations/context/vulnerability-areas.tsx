import {
  createContext,
  PropsWithChildren,
  SetStateAction,
  useCallback,
  useContext,
  useState,
} from "react";
import { useFormik } from "formik";
import { IndexedArea } from "@rrrcn/services/dist/src/controllers/migrations/types";
import { useSendAnalysis } from "../../common/utils";
type VulnerabilityFormType = {
  speed?: number;
  length?: number;
  wingspan?: number;
  nocturnalActivity?: number;
  flight_type?: "flapping" | "gliding";

  blades?: number;
  radius?: number;
  pitch?: number;
  chord?: number;
  bladeFormRadiusArray: number[];
  bladeFormChordsArray: number[];
  omega?: number;
  numberOfTurbines?: number;

  hubheight?: number;
  offset?: number;
  timeOfWorkPerMonth?: number[];
};
export type MigrationVulnerabilityContextType = {
  selectedAreas: (IndexedArea & { index: number })[];
  setSelectedAreas: React.Dispatch<
    SetStateAction<(IndexedArea & { index: number })[]>
  >;
  form?: ReturnType<typeof useFormik<VulnerabilityFormType>>;
};
const MigrationVulnerabilityContext =
  createContext<MigrationVulnerabilityContextType>({
    selectedAreas: [],
    setSelectedAreas: () => {},
    form: undefined,
  });
export const useMigrationVulnerabilityContextValue =
  (): MigrationVulnerabilityContextType => {
    const { onSend } = useSendAnalysis("maxent");

    const [selectedAreas, setSelectedAreas] = useState<any[]>([]);
    const vulnerabilityConfigForm = useFormik<VulnerabilityFormType>({
      onSubmit: () => {},
      initialValues: {
        bladeFormChordsArray: [],
        bladeFormRadiusArray: [],
        flight_type: "flapping",
      },
      validateOnChange: false,
    });
    return { selectedAreas, form: vulnerabilityConfigForm, setSelectedAreas };
  };
export const MigrationVulnerabilityContextProvider = ({
  value,
  children,
}: PropsWithChildren<{ value: MigrationVulnerabilityContextType }>) => {
  return (
    <MigrationVulnerabilityContext.Provider value={value}>
      {children}
    </MigrationVulnerabilityContext.Provider>
  );
};
export const useMigrationVulnerabilityContext = () => {
  const { selectedAreas, form, setSelectedAreas } = useContext(
    MigrationVulnerabilityContext
  );
  const toggleSelectedArea = useCallback(
    (area: IndexedArea & { index: number }) => {
      setSelectedAreas((prev) => {
        const isChecked = prev.find((it) => it.index === area.index);
        return isChecked
          ? prev.filter((it) => it.index !== area.index)
          : [...prev, area];
      });
    },
    []
  );
  return { selectedAreas, form, setSelectedAreas, toggleSelectedArea };
};
